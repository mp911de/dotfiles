#!/bin/bash

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/snusnu/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="https://github.com/snusnu/dotfiles"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
    mkdir ${DOTFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
    # Extract to the dotfiles directory
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/list
source ./lib/utils
source ./lib/brew

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# List additional software to install
if [[ "$1" == "-l" || "$1" == "--list" ]]; then
    run_list
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        --no-packages) no_packages=true ;;
        --no-sync) no_sync=true ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

# Before relying on Homebrew, check that packages can be compiled
if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first."
    printf "  Download them from: https://developer.apple.com/downloads\n"
    printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
    exit 1
fi

# Check for Homebrew
if ! type_exists 'brew'; then
    e_header "Installing Homebrew..."
    ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
fi

# Check for git
if ! type_exists 'git'; then
    e_header "Updating Homebrew..."
    brew update
    e_header "Installing Git..."
    brew install git
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
    e_header "Initializing git repository..."
    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
fi

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
    printf "Skipped dotfiles sync.\n"
else
    e_header "Syncing dotfiles..."
    # Pull down the latest changes
    git pull --rebase origin master
fi

# Install and update packages
if [[ $no_packages ]]; then
    printf "Skipped package installations.\n"
else
    printf "Updating packages...\n"
    # Install Homebrew formulae
    run_brew
    # Customize the installed brews and gems
    customize
fi

# Customize installed brews and gems
customize() {

  # Enable htop
  printf "The sudo password is needed to enable htop ..."
  sudo chown root:wheel /usr/local/Cellar/htop-osx/0.8.2.1/bin/htop
  sudo chmod u+s /usr/local/Cellar/htop-osx/0.8.2.1/bin/htop

  # Initialize postgres
  initdb /usr/local/var/postgres -E utf8
  ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist

  printf Bundling vim plugins
  vim +BundleInstall +qall

  printf Installing ruby-1.9 and jruby
  ruby-install ruby 1.9
  ruby-install jruby

  printf "Installing default gems for ruby-1.9 ..."
  chruby ruby-1.9
  gem env
  gem install bundler
  gem install pry
  gem install pry-debugger
  gem install pry-stack_explorer
  gem install pry-exception_explorer
  gem install pry-theme
  gem install interactive_editor
  gem install awesome_print
  gem install github-markup # convert markup to html with vim hammer plugin
  gem install tilt          # convert markup to html with vim hammer plugin

  printf "Update python setuptools and pip ..."
  pip install --upgrade setuptools
  pip install --upgrade pip

  printf "Install ipython ..."
  pip install ipython[all]
}

# Force create/replace the symlink.
link() {
    ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

# Create the necessary symbolic links between the `.dotfiles` and `HOME`
# directory. The `bash_profile` sources other files directly from the
# `.dotfiles` repository.
link_dotfiles() {
    link "bash/bashrc"       ".bashrc"
    link "bash/bash_profile" ".bash_profile"
    link "bash/inputrc"      ".inputrc"
    link "bash/hushlogin"    ".hushlogin"
    link "git/gitattributes" ".gitattributes"
    link "git/gitignore"     ".gitignore"
    link "ackrc"             ".ackrc"
    link "aprc"              ".aprc"
    link "cvsignore"         ".cvsignore"
    link "gemrc"             ".gemrc"
    link "irbrc"             ".irbrc"
    link "pryrc"             ".pryrc"
    link "ruby-version"      ".ruby-version"
    link "tmux.conf"         ".tmux.conf"
    link "vimrc"             ".vimrc"
}

# Copy `.gitconfig`.
# Any global git commands in `~/.bash_profile.local` will be written to
# `.gitconfig`. This prevents them from being committed to the repository.
mirrorfiles() {
    rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig
    link_dotfiles
    e_success "Dotfiles update complete!"
}

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
    mirrorfiles
    source ${HOME}/.bash_profile
else
    printf "Aborting...\n"
    exit 1
fi

# Ask before potentially overwriting OS X defaults
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
    bash ./bin/osxdefaults
    e_success "OS X settings updated! You may need to restart."
else
    printf "Skipped OS X settings update.\n"
fi
