#!/bin/bash

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/mp911de/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="https://github.com/mp911de/dotfiles"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
    mkdir ${DOTFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
    # Extract to the dotfiles directory
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/utils
source ./lib/brew
source ./lib/devtools
source ./lib/ruby
source ${DOTFILES_DIRECTORY}/devtools

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        --no-packages) no_packages=true ;;
        --no-sync) no_sync=true ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

run_devtools

# Force create/replace the symlink.
link() {
    ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

# Create the necessary symbolic links between the `.dotfiles` and `HOME`
# directory. The `bash_profile` sources other files directly from the
# `.dotfiles` repository.
link_dotfiles() {
    link "bash/bashrc"       ".bashrc"
    link "bash/bash_profile" ".bash_profile"
    link "bash/inputrc"      ".inputrc"
    link "bash/hushlogin"    ".hushlogin"
    link "git/gitattributes" ".gitattributes"
    link "git/gitignore"     ".gitignore"
    link "ackrc"             ".ackrc"
    link "aprc"              ".aprc"
    link "gemrc"             ".gemrc"
    link "irbrc"             ".irbrc"
    link "pryrc"             ".pryrc"
    link "ruby-version"      ".ruby-version"
    link "devtools"          ".devtools"

}

# Copy `.gitconfig`.
# Any global git commands in `~/.bash_profile.local` will be written to
# `.gitconfig`. This prevents them from being committed to the repository.
mirrorfiles() {
    rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig
    link_dotfiles
    e_success "Dotfiles update complete!"
}

